version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            
  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/Kyvgb9GqXkDWBZKkZw7ZdM/migration_<<parameters.workflow_id>>)
            if (( $SUCCESS == 1 ));
            then
            cd ~/project/backend
            npm install
            npm run migration:revert
            fi


jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Build front-end
                command: |
                    cd frontend
                    npm install
                    npm run build
            - save_cache:
                paths: [frontend/node_modules]
                key: frontend-build

    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: Back-end build
                command: |
                    cd backend
                    npm install
                    npm run build
            - save_cache:
                paths: [backend/node_modules]
                key: backend-build

    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Test front-end
                command: |
                    cd frontend
                    npm install
                    npm run test

    test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: Test back-end
                command: |
                    cd backend
                    npm install
                    npm run test

    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Scan front-end
                command: |
                    cd frontend
                    npm install
                    npm audit fix --audit-level=critical --force
        # npm audit --audit-level=critical

    scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: Scan back-end
                command: |
                    cd backend/
                    npm install
                    npm audit fix --audit-level=critical --force
                    
    deploy-infrastructure:
        docker:
        - image: amazon/aws-cli
        steps:
        - checkout
        - run:
            name: Install utilties
            command: |
                yum install -y tar gzip
        - run:
            name: Ensure back-end infrastructure exists
            command: |
                aws cloudformation deploy \
                    --region=us-east-1  \
                    --template-file .circleci/files/backend.yml \
                    --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                    --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
        - run:
            name: Ensure front-end infrastructure exist
            command: |
                aws cloudformation deploy \
                    --region=us-east-1  \
                    --template-file .circleci/files/frontend.yml \
                    --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                    --tags project=udapeople
        - run:
            name: Add back-end ip to ansible inventory
            command: |
                aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --output text >> .circleci/ansible/inventory.txt
                    cat .circleci/ansible/inventory.txt
        - persist_to_workspace:
            root: ~/
            paths:
                - project/.circleci/ansible/inventory.txt
                
        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            
    configure-infrastructure:
        docker:
         - image: python:3.7-alpine3.11

        steps:
            - checkout
            - add_ssh_keys:
                fingerprints: ["f3:09:48:b8:69:c4:88:a9:fb:da:f4:d5:33:3a:fb:04"]
            - attach_workspace:
                at: ~/
            - run:
                name: Getting Ansible
                command: |
                    apk add curl
                    apk add --update ansible
                    apk add --update tar 
                    apk add --update gzip
                    pip3 install awscli
            - run:
               name: Configure server
               command: |
                cat .circleci/ansible/inventory.txt
                ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
                    
            # Here's where you will add some code to rollback on failure     
            - destroy-environment:
                workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    run-migrations:
        docker:
        - image: sleavely/node-awscli:14.x
        steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - add_ssh_keys:
            fingerprints: ["f3:09:48:b8:69:c4:88:a9:fb:da:f4:d5:33:3a:fb:04"]
        - attach_workspace:
            at: ~/
        - run:
            name: Run migrations
            command: |
                cd backend
                npm install
                npm run migrations > migrations_dump.txt
        - run:
            name: Send migration results to memstash
            command: |   
                if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                then
                    curl https://kvdb.io/Kyvgb9GqXkDWBZKkZw7ZdM/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                fi

        - destroy-environment:
           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        - revert-migrations:
             workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    deploy-frontend:
        docker:
        - image: circleci/node:13.8.0
        steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
                sudo apt-get install zip unzip python ansible python-pip && pip install awscli         
        - run:
            name: Get backend url
            command: |
                export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text )
                export API_URL="http://${BACKEND_IP}:3030"
                echo "API_URL = ${API_URL}"
                echo ENVIRONMENT=production > frontend/.env
                echo NODE_ENV=production >> frontend/.env
                echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
                cat frontend/.env
        - run:
            name: Deploy frontend objects
            command: |
              cd frontend
              cat .env
              ls -larth
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
              aws s3 cp .env s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} 
                
        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    deploy-backend:
        docker:
        - image: circleci/node:13.8.0
        steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["f3:09:48:b8:69:c4:88:a9:fb:da:f4:d5:33:3a:fb:04"]
        - attach_workspace:
              at: ~/
        - run:
           name: Getting Ansible
           command: |
                sudo apt update
                sudo apt install ansible
        - run:
            name: Getting the AWS CLI
            command: |
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" \
                -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install
                export AWS_PAGER=""
        - run:
            name: Deploy backend
            command: |
                            cd backend
                            npm i
                            npm run build
                            cd ..
                            # Zip the directory
                            tar -C backend -czvf artifact.tar.gz .
                            cd .circleci/ansible
                            echo "Contents  of the inventory.txt file is -------"
                            cat inventory.txt
                            ansible-playbook -i inventory.txt deploy-backend.yml -v              
                    
        - destroy-environment:
                workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        - revert-migrations:
               workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
 
    # deploy-frontend:
    #     docker:
    #     - image: circleci/node:13.8.0
    #     steps:
    #     - checkout
    #     - run:
    #         name: Install dependencies
    #         command: |
    #             sudo apt-get install zip unzip python ansible python-pip && pip install awscli         
    #     - run:
    #         name: Get backend url
    #         command: |
    #             export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text )
    #             export API_URL="http://${BACKEND_IP}:3030"
    #             echo "API_URL = ${API_URL}"
    #             echo ENVIRONMENT=production > frontend/.env
    #             echo NODE_ENV=production >> frontend/.env
    #             echo NODE_ENV=production > "backend/.env"
    #             echo ENVIRONMENT=production >> "backend/.env"
    #             echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
    #             cat frontend/.env
    #     - run:
    #         name: Deploy frontend objects
    #         command: |
    #             cd frontend
    #             cat .env
    #             ls -larth
    #             npm install
    #             npm run build
    #             tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
    #             aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
    #             aws s3 cp .env s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} 
                
    #     - destroy-environment:
    #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    #     - revert-migrations:
    #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


    # deploy-backend:
    #       docker:
    #         - image: circleci/node:13.8.0
    #       steps:
    #        - checkout
    #        - add_ssh_keys:
    #             fingerprints: ["f3:09:48:b8:69:c4:88:a9:fb:da:f4:d5:33:3a:fb:04"]
    #        - attach_workspace:
    #               at: ~/
    #        - run:
    #           name: Getting Ansible
    #           command: |
    #                         sudo apt update
    #                         sudo apt install ansible
    #        - run:
    #           name: Getting the AWS CLI
    #           command: |
    #                         curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" \
    #                         -o "awscliv2.zip"
    #                         unzip awscliv2.zip
    #                         sudo ./aws/install
    #                         export AWS_PAGER=""
    #        - run:
    #             name: Deploy backend
    #             command: |
    #                         cd backend
    #                         npm i
    #                         npm run build
    #                         cd ..
    #                         # Zip the directory
    #                         tar -C backend -czvf artifact.tar.gz .
    #                         cd .circleci/ansible
    #                         echo "Contents  of the inventory.txt file is -------"
    #                         cat inventory.txt
    #                         ansible-playbook -i inventory.txt deploy-backend.yml -v              
                    
    #        - destroy-environment:
    #             workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    #        - revert-migrations:
    #            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        

    smoke-test:
        docker:
        - image: circleci/node:13.8.0
        steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
                sudo apt-get install curl python python-pip && pip install awscli
        - run:
            name: Get backend url
            command: |
                export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text )
                export API_URL="http://${BACKEND_IP}:3030"
                echo "API_URL = ${API_URL}"
                echo API_URL="http://${BACKEND_IP}:3030" > frontend/.env
                cat frontend/.env
                pwd
        - run:
            name: Backend smoke test
            command: |
                export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text )
                export API_URL="http://${BACKEND_IP}:3030"
                echo "${API_URL}"
                if curl "${API_URL}/api/status" | grep "ok"
                then
                    exit 0
                else
                    exit 1
                fi
       
                # export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text )
                # export API_URL="http://${BACKEND_IP}:3030"
                # echo "${API_URL}"
                # if curl "${API_URL}/api/status" | grep "ok"
                # then
                #     exit 0
                # else
                #     exit 1
                # fij
        - run:
            name: Frontend smoke test.
            command: |
                URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
                echo ${URL} 
                if curl -s ${URL} | grep "Welcome"
                then
                # Change this to 0 after the job fails
                exit 0
                else
                exit 1
                fi
        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    # cloudfront-update:
    #     docker:
    #     - image: amazon/aws-cli
    #     steps:
    #     - checkout
    #     - run:
    #         name: Install dependencies
    #         command: |
    #             yum install -y tar gzip
    #     - run:
    #         name: Update cloudfront distribution
    #         command: |
    #             export OldWorkflowID=$(aws cloudformation \
    #             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
    #             --no-paginate --output text)
    #             echo $OldWorkflowID > ~/OldWorkflowID.txt
    #             cat ~/OldWorkflowID.txt
                
    #             # Change the initial stack name, as applicable to you            
    #             aws cloudformation deploy \
    #             --template-file .circleci/files/cloudfront.yml \
    #             --stack-name InitialStack \
    #             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
    #             --tags project=udapeople
                
    #     - persist_to_workspace:
    #         root: ~/
    #         paths:
    #             - OldWorkflowID.txt
    #     # Here's where you will add some code to rollback on failureeeeees 
    #     - destroy-environment:
    #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    #     - revert-migrations:
    #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}                           
                
        
            
                            







#     hh


# cleanup:
#     docker:
#         # Docker image here
#     steps:
#         # Checkout code from git
#         - run:
#               name: Get old stack workflow id
#               command: |
#                   # your code here
#                   export OldWorkflowID="the id here"
#                   export STACKS=[] #put the list of stacks here
#         - run:
#               name: Remove old stacks and files
#               command: |
#                   if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#                   then
#                     # your code here
#                   fi

workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                requires: [build-frontend]
            - test-backend:
                requires: [build-backend]
            - scan-frontend:
                requires: [build-frontend]
            - scan-backend:
                requires: [build-backend]
            - deploy-infrastructure:
                requires:
                    [test-frontend, test-backend, scan-frontend, scan-backend]
          
            - configure-infrastructure:
                  requires: [deploy-infrastructure]
            - run-migrations:
                  requires: [configure-infrastructure]
            - deploy-frontend:
                  requires: [run-migrations]
            - deploy-backend:
                  requires: [run-migrations]
            - smoke-test:
                  requires: [deploy-backend, deploy-frontend]
            # - cloudfront-update:
            #       requires: [smoke-test]
            # - cleanup:
            #       requires: [cloudfront-update]