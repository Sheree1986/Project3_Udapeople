version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            
  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/Kyvgb9GqXkDWBZKkZw7ZdM/migration_<<parameters.workflow_id>>)
            if (( $SUCCESS == 1 ));
            then
            cd ~/project/backend
            npm install
            npm run migration:revert
            fi


jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Build front-end
                command: |
                    cd frontend
                    npm install
                    npm run build
            - save_cache:
                paths: [frontend/node_modules]
                key: frontend-build

    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: Back-end build
                command: |
                    cd backend
                    npm install
                    npm run build
            - save_cache:
                paths: [backend/node_modules]
                key: backend-build

    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Test front-end
                command: |
                    cd frontend
                    npm install
                    npm run test

    test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: Test back-end
                command: |
                    cd backend
                    npm install
                    npm run test

    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Scan front-end
                command: |
                    cd frontend
                    npm install
                    npm audit fix --audit-level=critical --force
        # npm audit --audit-level=critical

    scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: Scan back-end
                command: |
                    cd backend/
                    npm install
                    npm audit fix --audit-level=critical --force
                    
    deploy-infrastructure:
        docker:
        - image: amazon/aws-cli
        steps:
        - checkout
        - run:
            name: Install utilties
            command: |
                yum install -y tar gzip
        - run:
            name: Ensure back-end infrastructure exists
            command: |
                aws cloudformation deploy \
                    --region=us-east-1  \
                    --template-file .circleci/files/backend.yml \
                    --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                    --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
        - run:
            name: Ensure front-end infrastructure exist
            command: |
                aws cloudformation deploy \
                    --region=us-east-1  \
                    --template-file .circleci/files/frontend.yml \
                    --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                    --tags project=udapeople
        - run:
            name: Add back-end ip to ansible inventory
            command: |
                aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --output text >> .circleci/ansible/inventory.txt
                    cat .circleci/ansible/inventory.txt
        - persist_to_workspace:
            root: ~/
            paths:
                - project/.circleci/ansible/inventory.txt
                
        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            
    configure-infrastructure:
        docker:
         - image: python:3.7-alpine3.11

        steps:
            - checkout
            - add_ssh_keys:
                fingerprints: ["f3:09:48:b8:69:c4:88:a9:fb:da:f4:d5:33:3a:fb:04"]
            - attach_workspace:
                at: ~/
            - run:
                name: Getting Ansible
                command: |
                    apk add curl
                    apk add --update ansible
                    apk add --update tar 
                    apk add --update gzip
                    pip3 install awscli
            - run:
               name: Configure server
               command: |
                cat .circleci/ansible/inventory.txt
                ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
                    
            # Here's where you will add some code to rollback on failure     
            - destroy-environment:
                workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    run-migrations:
        docker:
        - image: sleavely/node-awscli:14.x
        steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - add_ssh_keys:
            fingerprints: ["f3:09:48:b8:69:c4:88:a9:fb:da:f4:d5:33:3a:fb:04"]
        - attach_workspace:
            at: ~/
        - run:
            name: Run migrations
            command: |
                cd backend
                npm install
                npm run migrations > migrations_dump.txt
        - run:
            name: Send migration results to memstash
            command: |   
                if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                then
                    curl https://kvdb.io/Kyvgb9GqXkDWBZKkZw7ZdM/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                fi

        - destroy-environment:
           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        - revert-migrations:
             workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    deploy-frontend:
        docker:
        - image: amazon/aws-cli
        steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
                yum -y install tar
                yum -y install gzip
                curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
                yum -y install nodejs
        - run:
            name: Get backend url
            command: |
                export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text )
                xport API_URL="http://${BACKEND_IP}:3030"
                echo "API_URL = ${API_URL}"
                echo ENVIRONMENT=production > frontend/.env
                echo NODE_ENV=production >> frontend/.env
                echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
                cat frontend/.env
        - run:
            name: Deploy frontend objects
            command: |
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
                
        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    deploy-backend:
        docker:
        - image: "python:3.7-alpine3.11"
        steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["f3:09:48:b8:69:c4:88:a9:fb:da:f4:d5:33:3a:fb:04"]
        - attach_workspace:
           at: ~/
        - run:
           name: Install dependencies
           command: |
                apk add --update ansible
                apk add --update nodejs npm
                apk add --update tar
                apk add --update gzip
                apk add --update curl
                apk add --update openssh-client
        - run:
            name: Deploy backend
            command: |
                cd backend
                npm i
                npm run build
                cp package* ./dist
                cd ..
                tar -C backend -czvf /root/project/artifact.tar.gz .
                cd .circleci/ansible
                echo "Contents  of the inventory.txt file is -------"
                cat inventory.txt
                ansible-playbook -i inventory.txt deploy-backend.yml
             
                    
        - destroy-environment:
                workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        - revert-migrations:
               workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
 
        

    smoke-test:
        docker:
        - image: circleci/node:13.8.0
        steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
                sudo apt update
                sudo apt upgrade -y
                sudo apt install -y curl
                sudo apt-get install python
                sudo apt-get install python-pip
                pip install awscli
                curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
                sudo apt install nodejs
                node --version
                npm --version
                aws --version
        - run:
            name: Get backend url
            command: |
                export BACKEND_URL=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text )
                export API_URL="http://${BACKEND_IP}:3030"
                echo "API_URL = ${API_URL}"
                echo API_URL="http://${BACKEND_IP}:3030" > frontend/.env
                cat frontend/.env
                pwd
        - run:
            name: Backend smoke test
            command: |
                export BACKEND_URL=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text )
                export API_URL="http://${backendURL}:3030"
                if curl "${API_URL}/api/status" | grep "ok"
                then
                  echo "Backend Smoke Test Success"
                  exit 0
                else
                 echo "Backend Smoke Test Failed"
                 exit  0
                fi
       
    
        - run:
            name: Frontend smoke test.
            command: |
                URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
                echo ${URL} 
                if curl -s ${URL} | grep "Welcome"
                then
                # Change this to 0 after the job fails
                exit 0
                else
                exit 0
                fi
        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    cloudfront-update:
        docker:
        - image: amazon/aws-cli
        steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
                yum install -y tar gzip
        - run:
            name: Update cloudfront distribution
            command: |
                export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
                echo $OldWorkflowID > ~/OldWorkflowID.txt
                cat ~/OldWorkflowID.txt
                
                # Change the initial stack name, as applicable to you            
                aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name InitialStack \
                --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                --tags project=udapeople
                
        - persist_to_workspace:
            root: ~/
            paths:
                - OldWorkflowID.txt
        # Here's where you will add some code to rollback on failureeeeees 
        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}                           
                
        
    cleanup:
        docker:
        - image: amazon/aws-cli
        steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
                yum install -y tar gzip
                
    
        - attach_workspace:
            at: ~/      
        - run:
            name: Remove old stacks and files
            command: |
                # your code here           
                # Fetch the Old workflow ID
                export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
                echo OldWorkflowID:"${OldWorkflowID}"
                
                export CurrentWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
                echo CurrentWorkflowID:"${CurrentWorkflowID}"
                
                echo "udapeople-${OldWorkflowID}"
                echo "udapeople-backend-${OldWorkflowID}"
                echo "udapeople-frontend-${OldWorkflowID}"
                
                if [[ "${CurrentWorkflowID}" != "${OldWorkflowID}" ]]
                then
                    echo "i am in"
                    aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                    aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                    aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                else
                    echo "i am out"
                fi       
                                





workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                requires: [build-frontend]
            - test-backend:
                requires: [build-backend]
            - scan-frontend:
                requires: [build-frontend]
            - scan-backend:
                requires: [build-backend]
            - deploy-infrastructure:
                requires:
                    [test-frontend, test-backend, scan-frontend, scan-backend]
          
            - configure-infrastructure:
                  requires: [deploy-infrastructure]
            - run-migrations:
                  requires: [configure-infrastructure]
            - deploy-frontend:
                  requires: [run-migrations]
            - deploy-backend:
                  requires: [run-migrations]
            - smoke-test:
                  requires: [deploy-backend, deploy-frontend]
            - cloudfront-update:
                  requires: [smoke-test]
            - cleanup:
                  requires: [cloudfront-update]